import { Injectable } from '@nestjs/common'import { Connection, Model } from 'mongoose'import { InjectModel, InjectConnection } from '@nestjs/mongoose'import * as bcrypt from 'bcrypt'import { IUserService, SearchUserParams } from './users.interface'import { CreateDto } from './dto/users.dto'import { Users, UsersDocument } from './schemas/users.schema'@Injectable()export class UsersService implements IUserService {  private saltRounds = 10  constructor (    @InjectModel(Users.name) private UsersModel: Model<UsersDocument>,    @InjectConnection() private connection: Connection  ) {  }  findById (id: string) {    return this.UsersModel.findOne({ id }).exec()  }  findByEmail (email: string) {    return this.UsersModel.findOne({ email }).exec()  }  findAll (params: SearchUserParams) {    return this.UsersModel.find().exec()  }  /**   * Создание пользователя   * @param data   */  create (data: CreateDto) {    data.password = this.getHash(data.password)    const user = new this.UsersModel(data)    return user.save()  }  /**   * Вернуть хеш из строки   * @param pass   */  getHash (pass: string): string {    return bcrypt.hashSync(pass, this.saltRounds)  }  /**   * Сверка пароля   * @param pass   * @param hash   */  compare (pass: string, hash: string): boolean {    return bcrypt.compareSync(pass, hash)  }}